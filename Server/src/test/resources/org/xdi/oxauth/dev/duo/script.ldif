dn: inum=@!1111!0002!4907,ou=appliances,o=gluu
changetype: modify
replace: oxidpauthentication
oxidpauthentication: {"name":"duo","enabled":true,"fields":[{"name":"duoHostname","values":["localhost:8080"]},{"name":"duoKey","values":["12345677"]},{"name":"duoSecret","values":["20122012"]}],"priority":"02"}
oxidpauthentication: {"name":"ldap","enabled":true,"fields":[{"name":"ldapHost","values":["seed.gluu.org"]},{"name":"ldapPort","values":["1389"]},{"name":"ldapBindDn","values":["cn=Directory Manager"]},{"name":"ldapBindPw","values":["Ni2Bih3nCUU="]},{"name":"ldapUseSSL","values":["false"]}],"priority":"01"}
oxidpauthentication: {"name":"customAuthentication","enabled":true,"fields":[{"name":"property.duo_host","values":["api-fa928e64.duosecurity.com"]},{"name":"property.duo_ikey","values":["DIT2906CETIMKHE1QND8"]},{"name":"property.duo_skey","values":["cjNn9R4QvQV0R2Mynw2CauCUesojuR3cPGDoVygM"]},{"name":"property.duo_akey","values":["6f88ca3dea7ac88a514cdef7c18021678ccaf0e1"]},{"name":"script.__$__customAuthenticationScript__$__","values":["from org.jboss.seam.contexts import Context, Contexts\r\nfrom org.jboss.seam.security import Identity\r\nfrom org.xdi.oxauth.service.python.interfaces import ExternalAuthenticatorType\r\nfrom org.xdi.oxauth.service import UserService\r\nfrom org.xdi.util import StringHelper\r\nfrom org.xdi.util import ArrayHelper\r\n\r\nimport java\r\nimport duo_web\r\n\r\nclass ExternalAuthenticator(ExternalAuthenticatorType):\r\n    def __init__(self, currentTimeMillis):\r\n        self.currentTimeMillis = currentTimeMillis\r\n\r\n    def authenticate(self, configurationAttributes, userAuthenticationAttributes, requestParameters, step):\r\n        context = Contexts.getEventContext()\r\n        context.remove(\"duo_host\");\r\n        context.remove(\"duo_sig_request\");\r\n\r\n\tduo_host = configurationAttributes.get(\"duo_host\").getValue2()\r\n        ikey = configurationAttributes.get(\"duo_ikey\").getValue2()\r\n        skey = configurationAttributes.get(\"duo_skey\").getValue2()\r\n        akey = configurationAttributes.get(\"duo_akey\").getValue2()\r\n\r\n        if (step == 1):\r\n            print \"Duo authentication. Step 1\"\r\n\r\n            credentials = Identity.instance().getCredentials()\r\n\r\n            userName = credentials.getUsername()\r\n            userPassword = credentials.getPassword()\r\n            #print \"Duo python - username: \" + username + \" password: \"  + password\r\n            loggedIn = False\r\n            if (StringHelper.isNotEmptyString(userName) and StringHelper.isNotEmptyString(userPassword)):\r\n                userService = UserService.instance()\r\n                loggedIn = userService.authenticate(userName, userPassword)\r\n\r\n            if (not loggedIn):\r\n                return False\r\n\r\n            duo_sig_request = duo_web.sign_request(ikey, skey, akey, userName)\r\n            print \"Duo authentication. Step 1 duo_sig_request:\" + duo_sig_request\r\n            \r\n            context.set(\"duo_host\", duo_host)\r\n            context.set(\"duo_sig_request\", duo_sig_request)\r\n            context.set(\"username\", userName)\r\n\r\n            return True\r\n        elif (step == 2):\r\n            print \"Duo authentication. Step 2\"\r\n            \r\n            sig_response_array = requestParameters.get(\"sig_response\")\r\n            duoUsername = requestParameters.get(\"username\")[0]\r\n            if ArrayHelper.isEmpty(sig_response_array):\r\n                return False\r\n\r\n            sig_response = sig_response_array[0]\r\n\r\n            print \"Duo authentication. Step 2 duo_sig_response:\" + sig_response\r\n\r\n            authenticated_username = duo_web.verify_response(ikey, skey, akey, sig_response)\r\n            print \"Duo authentication. Step 2: authenticated_username:\" + authenticated_username + \", expected username: \" + duoUsername\r\n\r\n            if StringHelper.equalsIgnoreCase(duoUsername, authenticated_username):\r\n                return True\r\n\r\n        return False\r\n\r\n    def getCountAuthenticationSteps(self, configurationAttributes):\r\n        return 2\r\n\r\n    def getPageForStep(self, configurationAttributes, step):\r\n        if (step == 2):\r\n            return \"duologin.seam\"\r\n        return \"\"\r\n"]}],"priority":"1"}
